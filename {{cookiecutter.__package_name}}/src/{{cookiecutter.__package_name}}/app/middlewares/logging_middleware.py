"""Middleware for logging requests and responses."""

import time
from collections.abc import Awaitable, Callable

from fastapi import Request, Response
from starlette.middleware.base import BaseHTTPMiddleware
from starlette.types import ASGIApp

from {{cookiecutter.__package_name}}.logger import get_logger

logger = get_logger(__name__)


class LoggingMiddleware(BaseHTTPMiddleware):  # pylint: disable=too-few-public-methods
    """Middleware for logging incoming requests and outgoing responses."""

    def __init__(self, app: ASGIApp):
        """Initialize the middleware with the application instance."""
        super().__init__(app)

    async def dispatch(self, request: Request, call_next: Callable[[Request], Awaitable[Response]]) -> Response:
        """
        Process the incoming request, log relevant information, and measure processing time.

        Arguments:
            request (Request): The incoming HTTP request.
            call_next (Callable[[Request], Awaitable[Response]]): The next middleware or endpoint handler.

        Returns:
            Response: The HTTP response generated by the application.

        """
        start_time = time.time()

        # Log request details
        client_ip = request.client.host if request.client else "unknown"
        logger.info(
            "Received request: %s %s from %s",
            request.method,
            request.url.path,
            client_ip,
        )

        try:
            response = await call_next(request)
        except Exception as exc:
            # Log exception details
            process_time = time.time() - start_time
            logger.exception(
                "Exception occurred while processing request: %s %s in %.4fs",
                request.method,
                request.url.path,
                process_time,
            )
            raise exc

        process_time = time.time() - start_time

        # Log response details
        logger.info(
            "Sent response: %s for %s %s in %.4fs",
            response.status_code,
            request.method,
            request.url.path,
            process_time,
        )

        # Add process time header
        response.headers["X-Process-Time"] = f"{process_time:.4f}s"
        return response
